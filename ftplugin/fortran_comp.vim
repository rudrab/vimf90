"########################################################################
" File: fortran_comp.vim
" Author: Rudra Banerjee (bnrj DOT rudra at gmail.com) 
" Version: 0.2
" Copyright: Copyright (C) 2015 Rudra Banerjee
" 
"    This program is free software: you can redistribute it and/or modify
"    it under the terms of the GNU General Public License as published by
"    the Free Software Foundation, either version 3 of the License, or
"    (at your option) any later version.
"
"    This program is distributed in the hope that it will be useful,
"    but WITHOUT ANY WARRANTY; without even the implied warranty of
"    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
"    GNU General Public License for more details.
"
" Description: This file completes lists of subprogram
"########################################################################
 
" GetComp: Menu and Sunroutine Completion {{{1
function! GetComp(arg)
"if ! exists('g:modpath')
  "let g:modpath = 'src,,.'
"endif
python << EOF
import vim
import os
flsts = [' ']
if vim.eval("a:arg") == "module":
  flsts.append("ieee_arithmatic")
  flsts.append("ieee_exceptions")
  flsts.append("ieee_features")
  flsts.append("iso_C_binding")
  flsts.append("iso_fortran_env")
  flsts.append("omp_lib")
  flsts.append("omp_lib_kinds")
if vim.eval("a:arg") == "subroutine":
  flsts.append("alarm()")
  flsts.append("date_and_time()")
  flsts.append("backtrace")
  flsts.append("c_f_procpointer()")
  flsts.append("chdir()")
  flsts.append("chmod()")
  flsts.append("co_broadcast()")
  flsts.append("get_command()")
  flsts.append("get_command_argument()")
  flsts.append("get_environment_variable()")
  flsts.append("mvbits()")
  flsts.append("random_number()")
  flsts.append("random_seed()")
  
path = "."
for dirs, subdirs, files in os.walk(path):
    for tfile in files:
        if tfile.endswith(('f90', 'F90', 'f', 'F')):
            ofile = open(dirs+'/'+tfile)
            for line in ofile:
                if line.lower().strip().startswith(vim.eval("a:arg")):
                    modname = line.split()[1]
                    flsts.append(modname)
vim.command("let flstsI = %s"%flsts)                    
EOF
call complete(col('.'), flstsI)
"call complete_check()
return ''
endfunction


""Fortran Makefile creator
""Autoconf
"function! MakeAConf()
"  let cfl = "configure.ac"
"  if filereadable(cfl)
"    let cfl = "configure.ac.gen"
"  endif
"  let binname = fnamemodify(getcwd(), ":t")
"python<< EOF
"import vim
"import os
"ofn = vim.eval("cfl")
"binname=vim.eval("binname")
"#binname=os.path.basename(os.getcwd())

"with open(ofn,"w") as con:
"    con.write("#This file is generated by vimf90 plugin\n#This is a bare bone configure.ac file\n")
"    con.write("#AC_PREREQ(2.69)\n")
"    con.write("AC_INIT(["+binname+"],[0.1])\n")
"    con.write("AC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_MACRO_DIR([m4])\n")
"    con.write("AM_INIT_AUTOMAKE([1.9.6 dist-bzip2 subdir-objects foreign])\n")
"    con.write("AC_OPENMP\nFCFLAGS=\"$OPENMP_FFLAGS -std=f2008 -g\"\nAC_PROG_FC([gfortran])\n")
"    con.write("AC_CHECK_PROG([DEPF90_CHECK],[makedepf90],[yes],[no])\n")
"    con.write("AM_CONDITIONAL([FOUND_MAKEDEPF90], [test \"x$DEPF90_CHECK\" = xyes])\n")
"    con.write("AM_COND_IF([FOUND_MAKEDEPF90],,[AC_MSG_WARN([required program 'makedepf90' not found.])])\n")
"    con.write("AC_CONFIG_FILES([\n\tMakefile\n\t])\nAC_OUTPUT")
"print "File "+ofn+" created. Check it before proceed."#+instr
"con.close()
"EOF
"exe ":edit ".cfl
"endfunction   

""Automake
"function! MakeAMake()
"python<<EOF
"import vim
"import os
"path = "."
"slsts=[" "]
"s=" "
"ss=""
"ofn="Makefile.am"
"if os.path.isfile("Makefile.am"):
"  ofn="Makefile.am.gen"
"exclude=[""]
"binname=os.path.basename(os.getcwd())
"if os.getcwd() != os.path.expanduser("~"):
"  for dirs, subdirs, files in os.walk(path, topdown=True):
"    subdirs[:] = [d for d in subdirs if d not in exclude]    
"    for srcs in files:      
"      if srcs.endswith((".f", ".f90", ".F", ".F90")):
"        snm=dirs+"/"+srcs
"        s +=snm+" "
"        ss +=os.path.splitext(snm)[0]+".o:"+snm+"\n"
"  with open(ofn,"w") as mak:
"    mak.write("#This file is generated by vimf90 plugin\n#This is a bare bone Makefile.am file\n")
"    mak.write("bin_PROGRAMS =\t"+binname+"\n")
"    mak.write(binname+"_SOURCES =\t"+s+"\n")
"    mak.write("if FOUND_MAKEDEPF90\ndepend depend.mk:\n\tmakedepf90 $("+binname+"_SOURCES) >depend.mk\n")
"    mak.write("@am__include@ @am__quote@depend.mk@am__quote@\n")
"    mak.write("else\n$(warning Create the dependencies Manually or try installing makedepf90)\n")
"    mak.write("$(error  like ./src/main.o:./src/main.f90)\n")
"    mak.write(ss+"endif\n")
"    mak.write(binname+"_LDADD = \nEXTRA_DIST= \nCLEANFILES =*.mod,*.o")
"  print "File "+ofn+" created. Check it before proceed."
"else:
"  print "This is the homedir. Files are not listed"
"EOF
"endfunction


"function! Edname(arg) 
":let Cbuf = bufname("%")
"python<<EOF
"import vim
"import fileinput
"Cb=vim.eval("Cbuf")
"parg=vim.eval("a:arg")
"starg="end "+parg
"print parg
"print starg
"with open(Cb) as inp:
"    for line in inp:
"        if line.lstrip().lower().startswith(parg) :
"            var = line.rsplit(' ', 1)[-1].strip()
"        if line.lstrip().lower().startswith(starg):
"            v2 = line.strip()
"inp.close()
"STR=v2.rsplit(' ', 1)[0]+" "+var
"for line in fileinput.input(Cb, inplace=True):
"    print line.replace(v2, STR).rstrip()
"EOF
"endfunction

"" FixName: Change Subprogram name {{{1
"function! FixName(arg)
"    let [buf, l, c, off] = getpos('.')
"    call cursor([1, 1, 0])

"    let lnum = search('\v\c^\s*' . a:arg . '\s+', 'cnW')
"    if !lnum
"        call cursor(l, c, off)
"        return
"    endif

"    let parts = matchlist(getline(lnum), '\v\c^\s*' . a:arg . '\s+(\S*)\s*$')
"    if len(parts) < 2
"        call cursor(l, c, off)
"        return
"    endif

"    let lnum = search('\v\c^\s*End\s*' . a:arg . '\s+', 'cnW')
"    call cursor(l, c, off)
"    if !lnum
"        return
"    endif

"    call setline(lnum, substitute(getline(lnum), '\v\c^\s*End\s*' . a:arg . '\s+\zs.*', parts[1], ''))
"endfunction

"let s:plugin_dir = $HOME.'/.vim/bundle/vimf90/'
"Prg: Expand snippets
let s:plugin_dir=filter(split(&rtp, ','), 'v:val =~ "/vimf90"')[0]
let s:templatedir=s:plugin_dir . '/templates/'
function! Prog(arg)
  execute 'r ' . s:templatedir . a:arg . '.txt'
  %substitute#\[:EVAL:\]\(.\{-\}\)\[:END:\]#\=eval(submatch(1))#ge
endfunction
