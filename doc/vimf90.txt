*vimf90.txt*   A fortran-90+ plugin for easy editing vimf90
       _            __ ___   ___        ~
__   _(_)_ __ ___  / _/ _ \ / _ \   _   ~
\ \ / / | '_ ` _ \| || (_) | | | |_| |_ ~
 \ V /| | | | | | |  _\__, | |_| |_   _|~
  \_/ |_|_| |_| |_|_|   /_/ \___/  |_|  ~

=====================================================================
CONTENTS                          *vimf90-contents*

1. Introduction ................... |vimf90-Intro|
   1.1 What it is.................. |vimf90-About|
2. Install ........................ |vimf90-Install|
   2.1 Dependencies ............... |vimf90-Dependencies|
3. Features ....................... |vimf90-Features|
  3.1  construct .................. |vimf90-Construct|
  3.2  statements ................. |vimf90-Stats|
  3.3  subprograms ................ |vimf90-Subs|
  3.4  completions ................ |vimf90-Comp|
  3.5  List of available mappings . |vimf90-List|
4. Menu                             |vimf90-Menu|
5. Dependencies ................... |vimf90-Deps|
6. Change Log ..................... |vimf90-Clog|
=====================================================================
1. Introduction                                 *vimf90-Intro*
This is a fortran IDE for vim. It is intended to write fortran code faster and easier in vim.
Unfortunately, due to shortage of time, this help file is not often updated. Please check the
Readme in github or the project page for updated info. 

 * https://rudrab.github.io/vimf90/
 * https://github.com/rudrab/vimf90#introduction


1.1 Features                                    *vimf90-About*
  * An IDE like environment for fortran 90+
  * Increases development speed considerably.
  * Easy to add new subprograms
  * Auto completion of program blocks, like if-endif etc.
  * Popup menu for standard and user defined modules and subroutines
  * Support for menu mode
  * Support for gnu-autotools (configure, make)
  * IMPORTANT: All options are properly updated at the webpage. Please have a look.
  
  * https://rudrab.github.io/vimf90/
=====================================================================
2. Install                                      *vimf90-Install*
The easiest way of installation is to use a vim plugin manager.  

Using Vundle:
>
  Plugin 'rudrab/vimf90' 
<

Using vim-plug:
>
  Plug 'rudrab/vimf90'
<

2.1 Dependencies                                *vimf90-Dependencies*
Without reinventing the wheel, this plugin depends on other awesome plugins:
   * Modern vim, tested and developed with `8+`. Vim should be build with python-3
   * Ultisnips: (Essential)
   * coc-nvim:  (Highle Recommended) For Language server support
   * fortls and fprettify: will be installed automatically if you choose proper option (Read
     below.).

=====================================================================

3. Features                                    *vimf90-Features*
Default `<Leader>` key used here is **`**. You can change this by using:

>
  let g:VimF90Leader = "your chosen key"
<

in your `.vimrc`.

This explains mappings of this plugin.
---------------------------------------------------------------------

3.1 construct                                   *vimf90-Construct*
If,do,select etc statements, that are closed by a corresponding end
is defined here. After typing the first line, pressing <F7> will
complete the construct. For example:
 you type:                   you get:      ~
>
 trial: do i=1,10<F7>        trial: do i=1,10
                               <cursor here>
                             end do trial
Avalable construct:
  i) do, ii) if, iii)selectcase, iv)forall, v)type,

NB: This part is largly copied from 
(http://www.vim.org/scripts/script.php?script_id=2487)
---------------------------------------------------------------------

3.2  Statements                                 *vimf90-stats*
Some statements is included here for less typing. These are mostly
one-liner or part of the line:
you type:           you get:~
>
`wr        write(⌶,*)<++>
`rd        read(⌶,*)<++>
`re        real(⌶)::<++>
`int       integer(⌶)::<++>
`ch        character(len=⌶)::<++> 
`par       parameter
`sre       selected_real_kind(⌶)
`sie       selected_integer_kind(⌶)

where ⌶ is the current cursor position.
<
The <++> is a nice option, a <CTRL+J> will put your cursor in that 
position.
---------------------------------------------------------------------

3.3  subprograms                                *vimf90-subs*
This key-combinations makes program and subprograms header.  
It supports program(`prg), module(`mod), subroutine and function. 
As shown, typing the first 3 letter and pressing <Shift-TAB>
will complete the header section of the program. e.g.
you type:                  you get:~
>
 `prg    !This is file : <your file name>
         ! Author= <users login name>
         ! Started at: <current time>
         ! 
         Program  <program name you give, by default, filename>
         Implicit None
         <++Start Typing++>
         End Program  <program name you give, by default, filename>
<
---------------------------------------------------------------------

3.4 Fortran subprogram complete                 *vimf90-comp*
vimf90 now supports subprogram completions.  *<leader>use* and
*<leader>call* will popup a list of modules and subroutine inside
present working dirs and fortran's standard module and subroutines.
---------------------------------------------------------------------

3.5 List of Mappings                            *vimf90-List*
Type:                                            get:~
---------------------------------------------------------------------
Construct                                       *vimf90-List-Cons*
>
 [name:]do[iterator]<F7>                        do construct 
 [name:]if(condition)then<F7>                   if construct 
 selectcase<F7>                                 select construct 
 forall<F7>                                     forall construct
 type::name<F7>                                 type  construct
---------------------------------------------------------------------
Statements                                      *vimf90-List-State* 
>
 `wr                               write(<cursor here>,*)<++>
 `rd                               read(<cursor here>,*)<++>
 `re                               real(<cursor here>)::<++>
 `int                              integer::<cursor here>
 `ch                               character(len=<cursor here>)::<++> 
 `par                              parameter
 `sre                              selected_real_kind()
 `sie                              selected_integer_kind()
---------------------------------------------------------------------
Program and Subprograms                         *vimf90-List-Subs*
>
 `prg                                           program header
 `mod                                           module header
 `sub                                           subroutine header
 `fun                                           function header
=====================================================================

4. Menu                                         *vimf90-Menu*
Menu is added for gui-help. It helps building project using 
gnu-autotool. Every fortran file will open with "Fortran90" element 
in the Menubar.
It currently has the option of Compile(Make, Make clean, build current 
file), Automake( A rudimentary configure.ac and Makefile.am file 
generator) and Programing blocks (as given in |vimf90-subs|).
=====================================================================

5. Dependencies                                 *vimf90-Deps*
i) This plugin depends on snippets. This should work on standard
snippets engine.  I have tested it with
http://www.vim.org/scripts/script.php?script_id=2715.  
The latest version is always be found in 
https://github.com/SirVer/ultisnips
=====================================================================

6. Change Log                                   *vimf90-Clog*
v1.0
        * Major Update
        * subroutine and module search is removed. This can be handed better with dedicated LSP
v0.3
        * Major update
        * Inclusion of Fortran Menu
        * Standard and inbuilt modules and subroutine pop up
        * Help with Autotool
v0.2
        * Major update
        * complete for subprogram
        * Formatting update
        * Major bugfixes in 
                ** Ultisnips
                ** Formats
v0.1.0
        *First stable, usable release
v0.0.2
        *Mostly maintenance release 
v0.0.1
        *Initial repo
